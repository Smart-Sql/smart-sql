package org.tools;

import clojure.lang.RT;
import clojure.lang.Var;
import cn.plus.model.db.MyScenesCache;
import org.apache.ignite.Ignite;
import org.apache.ignite.Ignition;
import org.apache.ignite.scheduler.SchedulerFuture;

import java.util.List;

public class MyPlusFunc {
    /**
     * 获取 table 的自增长
     * */
    public static Long auto_id(final String tableName) {
        return Ignition.ignite().atomicSequence(tableName, 0, true).incrementAndGet();
    }

    /**
     * 获取序列的第 n 个
     * */
    public static Object nth(final List<?> lst, final int index) {
        if (lst != null && lst.isEmpty() == false && index > -1 && index < lst.size())
        {
            return lst.get(index);
        }
        return null;
    }

    /**
     * 获取序列的第一个
     * */
    public static List<?> first(final List<List<?>> lst) {
        if (lst != null && lst.isEmpty() == false)
        {
            return lst.get(0);
        }
        return null;
    }

    /**
     * 显示信息
     * */
    public static String showMsg(final String msg)
    {
        return msg;
    }

    /**
     * 获取定时任务详细信息
     * */
    public static String getScheduler(final String schedulerName)
    {
        StringBuilder sb = new StringBuilder();
        SchedulerFuture schedulerFuture = MyPlusUtil.getIgniteScheduleProcessor(Ignition.ignite()).getScheduledFutures().get(schedulerName);
        sb.append("任务名称：" + schedulerName);
        sb.append(" 是否在运行：" + schedulerFuture.isRunning());
        sb.append(" 开始时间：" + schedulerFuture.createTime());
        sb.append(" 结束时间：" + schedulerFuture.lastFinishTime());
        return sb.toString();
    }

    public static Object myFun(final String methodName, final Object... ps)
    {
        Ignite ignite = Ignition.ignite();
        RT.init();
        Var myscenes_obj = (Var)ignite.cache("myscenes").get(methodName);
        return myscenes_obj.invoke(ps);
    }

    public static Object myInvoke(final String methodName, final Object... ps)
    {
        Ignite ignite = Ignition.ignite();
        MyScenesCache cache = (MyScenesCache) ignite.cache("my_scenes").get(methodName);
//        switch (cache.getScenesType())
//        {
//            case UPDATE:
//                MyUpdate.my_call_scenes(ignite, 0L, cache.getAst(), null);
//                break;
//            case INSERT:
//                MyInsert.my_call_scenes(ignite, 0L, cache.getAst(), null);
//                break;
//            case SELECT:
//                //MySelect.my_call_scenes(ignite, 0L, cache.getAst(), null);
//                break;
//            case DELETE:
//                MyDelete.my_call_scenes(ignite, 0L, cache.getAst(), null);
//                break;
//        }
        //MyInsert.my_call_scenes()
        return null;
    }
}
